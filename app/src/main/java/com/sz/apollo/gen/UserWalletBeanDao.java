package com.sz.apollo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sz.apollo.ui.models.UserWalletBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_WALLET_BEAN".
*/
public class UserWalletBeanDao extends AbstractDao<UserWalletBean, Long> {

    public static final String TABLENAME = "USER_WALLET_BEAN";

    /**
     * Properties of entity UserWalletBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Phrase = new Property(3, String.class, "phrase", false, "PHRASE");
        public final static Property Pk = new Property(4, String.class, "pk", false, "PK");
        public final static Property PublicKey = new Property(5, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property Keystore = new Property(6, String.class, "keystore", false, "KEYSTORE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property IsBackedUp = new Property(8, String.class, "isBackedUp", false, "IS_BACKED_UP");
        public final static Property IsNowWallet = new Property(9, String.class, "isNowWallet", false, "IS_NOW_WALLET");
        public final static Property WalletExistWay = new Property(10, String.class, "walletExistWay", false, "WALLET_EXIST_WAY");
        public final static Property IsAddUSDT = new Property(11, String.class, "isAddUSDT", false, "IS_ADD_USDT");
    }


    public UserWalletBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserWalletBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_WALLET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"ADDRESS\" TEXT," + // 2: address
                "\"PHRASE\" TEXT," + // 3: phrase
                "\"PK\" TEXT," + // 4: pk
                "\"PUBLIC_KEY\" TEXT," + // 5: publicKey
                "\"KEYSTORE\" TEXT," + // 6: keystore
                "\"REMARK\" TEXT," + // 7: remark
                "\"IS_BACKED_UP\" TEXT," + // 8: isBackedUp
                "\"IS_NOW_WALLET\" TEXT," + // 9: isNowWallet
                "\"WALLET_EXIST_WAY\" TEXT," + // 10: walletExistWay
                "\"IS_ADD_USDT\" TEXT);"); // 11: isAddUSDT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_WALLET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserWalletBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getType());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String phrase = entity.getPhrase();
        if (phrase != null) {
            stmt.bindString(4, phrase);
        }
 
        String pk = entity.getPk();
        if (pk != null) {
            stmt.bindString(5, pk);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(6, publicKey);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(7, keystore);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String isBackedUp = entity.getIsBackedUp();
        if (isBackedUp != null) {
            stmt.bindString(9, isBackedUp);
        }
 
        String isNowWallet = entity.getIsNowWallet();
        if (isNowWallet != null) {
            stmt.bindString(10, isNowWallet);
        }
 
        String walletExistWay = entity.getWalletExistWay();
        if (walletExistWay != null) {
            stmt.bindString(11, walletExistWay);
        }
 
        String isAddUSDT = entity.getIsAddUSDT();
        if (isAddUSDT != null) {
            stmt.bindString(12, isAddUSDT);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserWalletBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindString(2, entity.getType());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String phrase = entity.getPhrase();
        if (phrase != null) {
            stmt.bindString(4, phrase);
        }
 
        String pk = entity.getPk();
        if (pk != null) {
            stmt.bindString(5, pk);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(6, publicKey);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(7, keystore);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String isBackedUp = entity.getIsBackedUp();
        if (isBackedUp != null) {
            stmt.bindString(9, isBackedUp);
        }
 
        String isNowWallet = entity.getIsNowWallet();
        if (isNowWallet != null) {
            stmt.bindString(10, isNowWallet);
        }
 
        String walletExistWay = entity.getWalletExistWay();
        if (walletExistWay != null) {
            stmt.bindString(11, walletExistWay);
        }
 
        String isAddUSDT = entity.getIsAddUSDT();
        if (isAddUSDT != null) {
            stmt.bindString(12, isAddUSDT);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserWalletBean readEntity(Cursor cursor, int offset) {
        UserWalletBean entity = new UserWalletBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phrase
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pk
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publicKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keystore
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isBackedUp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isNowWallet
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // walletExistWay
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // isAddUSDT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserWalletBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhrase(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPk(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublicKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeystore(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsBackedUp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsNowWallet(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWalletExistWay(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsAddUSDT(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserWalletBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserWalletBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserWalletBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
